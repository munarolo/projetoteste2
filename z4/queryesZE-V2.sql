CREATE SYNONYM APP_DWT_VALIDADOR_FISCAL_BRT FOR SCH_C14DB14.T_VALIDADOR_FISCAL;
--BATENDO RESUMO COM FISCAL COM A CHAVE COMPLETA
TRUNCATE TABLE TMP_DET_DASH;
DROP TABLE TMP_DET_DASH;
SELECT COUNT(1) FROM  TMP_DET_DASH;

CREATE GLOBAL TEMPORARY TABLE TMP_DET_DASH ON COMMIT PRESERVE ROWS AS
--INSERT INTO TMP_DET_DASH 
SELECT 
GFX.*
, AF.CICLO_NF, AF.COD_SIT, AF.DSN_ORIGINAL, AF.VLR_TOTAL
, AF.SIGLA_CB, AF.ANO_MES_EMISSAONF, AF.UF_COB
    FROM (
      SELECT 
      ROW_NUMBER() OVER ( ORDER BY SOL.COD_HOLDING  ) LINHA_GFX,
      SOL.COD_HOLDING, 
      HC.DES_HOLDING, 
      SOL.MES_REFERENCIA, 
      DET.UF, 
      DET.CICLO, 
      SUM(VALOR_CONTABIL) VLR_RESUMO
      FROM SOLICITACAO_CARGA_PRE_GFX_BRT SOL
      INNER JOIN T_SIGLA_HOLDING_BRT HC ON HC.SIGLA_HOLDING = SOL.COD_HOLDING
      INNER JOIN RESUMO_FISCAL_GFX_BRT DET ON SOL.ID_CARGA = DET.ID_CARGA 
      AND SOL.TIPO_DEMONSTRATIVO = 'RESU'
      WHERE 0=0
      AND SOL.MES_REFERENCIA BETWEEN '202001' AND '202002'
--      AND SIGLA_HOLDING in ('', 'TLA')
--      AND UF = 'MA'
--      AND NVL(CICLO,0) = 0 --IN( 1,5 )
      GROUP BY SOL.COD_HOLDING, HC.DES_HOLDING, SOL.MES_REFERENCIA
      , DET.UF
      , DET.CICLO

    ) GFX
    INNER JOIN 
         (
         SELECT DISTINCT
           SIGLA_CB, 
           ANO_MES_EMISSAONF,
           UF_COB,
           CICLO_NF,
           COD_SIT,
           T.DSN_ORIGINAL,
           sum(T.VLR_TOTAL) VLR_TOTAL
         FROM SCH_C14DB14.T_VALIDADOR_FISCAL T
         WHERE ANO_MES_EMISSAONF BETWEEN '202002' AND '202002'
--         AND SIGLA_CB in ('', 'TLA')
--         AND T.UF_COB = 'MA'
--         AND T.CICLO_NF = 1
GROUP BY            SIGLA_CB, 
           ANO_MES_EMISSAONF,
           UF_COB,
           CICLO_NF,
           COD_SIT,
           T.DSN_ORIGINAL
           ) AF
     ON AF.SIGLA_CB = GFX.COD_HOLDING
        AND ANO_MES_EMISSAONF = GFX.MES_REFERENCIA
        AND AF.UF_COB = GFX.UF
        AND AF.CICLO_NF = GFX.CICLO
    WHERE 0=0
--    ORDER BY 1
;

--BATENDO RESUMO COM FISCAL COM A CHAVE SEM O CICLO PARA 
--   OS RESUMOS E FISCAIS QUE NAO BATERAM NA PRIMEIRA ETAPA
INSERT INTO TMP_DET_DASH 
SELECT 
GFX.*
, AF.CICLO_NF, AF.COD_SIT, AF.DSN_ORIGINAL, AF.VLR_TOTAL
, AF.SIGLA_CB, AF.ANO_MES_EMISSAONF, AF.UF_COB
FROM 
(
      SELECT 
      -1 * ROW_NUMBER() OVER ( ORDER BY SOL.COD_HOLDING  ) LINHA_GFX,
      SOL.COD_HOLDING, 
      HC.DES_HOLDING, 
      SOL.MES_REFERENCIA, 
      DET.UF, 
      DET.CICLO, 
      SUM(VALOR_CONTABIL) VLR_RESUMO
      FROM SOLICITACAO_CARGA_PRE_GFX_BRT SOL
      INNER JOIN T_SIGLA_HOLDING_BRT HC ON HC.SIGLA_HOLDING = SOL.COD_HOLDING
      INNER JOIN RESUMO_FISCAL_GFX_BRT DET ON SOL.ID_CARGA = DET.ID_CARGA 
      AND SOL.TIPO_DEMONSTRATIVO = 'RESU'
      WHERE 0=0
      AND SOL.MES_REFERENCIA BETWEEN '202002' AND '202002'
--      AND SIGLA_HOLDING in ('', 'TLA')
--      AND UF = 'MA'
--      AND NVL(CICLO,0) = 0 --IN( 1,5 )
       AND NOT EXISTS (
             SELECT 1
             FROM TMP_DET_DASH TMP 
             WHERE TMP.COD_HOLDING = SOL.COD_HOLDING
             AND TMP.MES_REFERENCIA = SOL.MES_REFERENCIA
             AND TMP.UF = DET.UF
             AND TMP.CICLO = DET.CICLO
             )

      GROUP BY SOL.COD_HOLDING, HC.DES_HOLDING, SOL.MES_REFERENCIA
      , DET.UF
      , DET.CICLO

    ) GFX
    LEFT JOIN 
         (
         SELECT DISTINCT
           SIGLA_CB, 
           ANO_MES_EMISSAONF,
           UF_COB,
           CICLO_NF,
           COD_SIT,
           T.DSN_ORIGINAL,
           sum(T.VLR_TOTAL) VLR_TOTAL
         FROM SCH_C14DB14.T_VALIDADOR_FISCAL T
         WHERE ANO_MES_EMISSAONF BETWEEN '202002' AND '202002'
--         AND SIGLA_CB in ('', 'TLA')
--         AND T.UF_COB = 'MA'
         AND NOT EXISTS (
               SELECT 1
               FROM TMP_DET_DASH TMP
               WHERE 
               TMP.SIGLA_CB = T.SIGLA_CB
               AND TMP.ANO_MES_EMISSAONF = T.ANO_MES_EMISSAONF
               AND TMP.UF_COB = T.UF_COB
               AND TMP.CICLO_NF = T.CICLO_NF
               )
          GROUP BY            SIGLA_CB, 
           ANO_MES_EMISSAONF,
           UF_COB,
           CICLO_NF,
           COD_SIT,
           T.DSN_ORIGINAL
--         AND T.CICLO_NF = 1
           ) AF
     ON AF.SIGLA_CB = GFX.COD_HOLDING
        AND ANO_MES_EMISSAONF = GFX.MES_REFERENCIA
        AND AF.UF_COB = GFX.UF
--        AND AF.CICLO_NF = GFX.CICLO
    WHERE 0=0
--    ORDER BY 1
;

--COMMIT

SELECT * FROM TMP_DET_DASH ;

--GRAFICO BAIDU
SELECT T.MES_REFERENCIA, T.COD_SIT, DECODE(T.COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT, SUM(T.VLR_TOTAL) VLR, AVG(RES.VLR), ROUND(((SUM(T.VLR_TOTAL) / AVG(RES.VLR))*100),2) AS PCT
  FROM TMP_DET_DASH  T
  INNER JOIN ( SELECT MES_REFERENCIA, SUM(VLR_RESUMO) VLR
                   FROM ( SELECT DISTINCT T.LINHA_GFX, MES_REFERENCIA, VLR_RESUMO FROM TMP_DET_DASH  T) GROUP BY MES_REFERENCIA) RES ON RES.MES_REFERENCIA = T.MES_REFERENCIA
  WHERE T.COD_SIT IS NOT NULL
  GROUP BY T.MES_REFERENCIA, T.COD_SIT
UNION 
SELECT PENDENTE.MES_REFERENCIA, PENDENTE.COD_SIT, DECODE(PENDENTE.COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT, SUM(PENDENTE.VLR_PENDENTE) VLR_PENDENTE, AVG(RESUMO.VLR) AS VLR_RESUMO, ROUND(((SUM(PENDENTE.VLR_PENDENTE) / AVG(RESUMO.VLR))*100),2) AS PCT
       FROM (SELECT 5 COD_SIT, RES.MES_REFERENCIA, NVL(RES.VLR,0) - NVL(REC.VLR,0) VLR_PENDENTE
                     FROM ( SELECT MES_REFERENCIA, 0 COD_SIT, SUM(VLR_RESUMO) VLR
                                   FROM ( SELECT DISTINCT T.LINHA_GFX, MES_REFERENCIA, VLR_RESUMO FROM TMP_DET_DASH  T) GROUP BY MES_REFERENCIA) RES
              JOIN ( SELECT MES_REFERENCIA, 4 COD_SIT, SUM(T.VLR_TOTAL) VLR FROM TMP_DET_DASH T WHERE COD_SIT IS NOT NULL GROUP BY MES_REFERENCIA) REC ON RES.MES_REFERENCIA = REC.MES_REFERENCIA
             ) PENDENTE --ON PENDENTE.MES_REFERENCIA = T.MES_REFERENCIA
       INNER JOIN ( SELECT MES_REFERENCIA, SUM(VLR_RESUMO) VLR
                   FROM ( SELECT DISTINCT T.LINHA_GFX, MES_REFERENCIA, VLR_RESUMO FROM TMP_DET_DASH  T) GROUP BY MES_REFERENCIA) RESUMO ON RESUMO.MES_REFERENCIA = PENDENTE.MES_REFERENCIA
GROUP BY PENDENTE.MES_REFERENCIA, PENDENTE.COD_SIT
ORDER BY 1,2
;

--  GROUP BY CUBE(T.MES_REFERENCIA, T.COD_SIT);
  
--SOMANDO VALORES DOS FISCAIS COM STATUS => RESUMO - RECEBIDO = PENDENTE
  
  

SELECT DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT,
       MES_REFERENCIA 
       FROM TMP_DET_DASH
       INNER JOIN (SELECT MES_REFERENCIA, CAST(SUM(VLR_RESUMO) AS INTEGER) AS VLR_RESUMO_TOT 
                          FROM T_TOT_DASHBOARD_FISCAL 
                          WHERE DES_GRUPO_SITUACAO = 'Resumo' GROUP BY MES_REFERENCIA) DSHB ON DSHB.TAB_TEMP=DSHA.TAB_TEMP AND DSHB.MES_REFERENCIA=DSHA.MES_REFERENCIA
       WHERE DSHA.TAB_TEMP = P_TAB_FATO 
       AND DES_GRUPO_SITUACAO <> 'Resumo'
       GROUP BY DSHA.DES_GRUPO_SITUACAO, DSHA.MES_REFERENCIA 
       ORDER BY 1, 2;



--- SUMARIZACAO SOBRE  DETALHADO DE ACORDO COM O AGRUPAMENTO DE CADA DASH

--SUMARZAR GERANDO A PIVOT SOBRE O RESULTADO ABAIXO
SELECT LINHA_GFX,
--COD_HOLDING, DES_HOLDING, 
MES_REFERENCIA, 
--UF, CICLO, 
SUM(VLR_RESUMO) , 
--LISTAGG( DES_SIT, ', ') WITHIN GROUP (ORDER BY DES_SIT ) 
DES_SIT
, SUM(VLR_TOTAL) VLR_TOTAL
FROM (
;




--DETALHADO
  SELECT '14' AS CSP, DES_HOLDING AS OPERADORA, UF, MES_REFERENCIA, CICLO, DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT, DSN_ORIGINAL, 0 AS QTD_ACIONAMENTOS, VLR_RESUMO, VLR_TOTAL AS VLR_TCOF
  FROM TMP_DET_DASH  T
  WHERE MES_REFERENCIA='202001' 
  ;

SELECT *
       FROM SCH_C14DB14.T_VALIDADOR_FISCAL  T
       WHERE ano_mes_emissaonf='202001'
       GROUP BY DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS')
       ;
SELECT * --'14' AS CSP, HOLDING_COB AS OPERADORA, UF_COB UF, ANO_MES_EMISSAONF MES_REFERENCIA, CICLO_NF, DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT, DSN_ORIGINAL, 0 AS QTD_ACIONAMENTOS, 0 VLR_RESUMO, VLR_TOTAL AS VLR_TCOF
         FROM SCH_C14DB14.T_VALIDADOR_FISCAL T
         WHERE ANO_MES_EMISSAONF = '202001' 
               AND NOT EXISTS (SELECT 1 
                                      FROM TMP_DET_DASH TMP
                                      WHERE TMP.COD_HOLDING=T.SIGLA_CB AND TMP.MES_REFERENCIA=T.ANO_MES_EMISSAONF AND TMP.UF_COB=T.UF_COB AND (TMP.CICLO_NF=T.CICLO_NF))
         ;
         
SELECT * FROM TMP_DET_DASH  T WHERE T.COD_HOLDING='CTB' AND UF='DF' AND MES_REFERENCIA='202001';

SELECT * FROM 
       (
      SELECT cod_holding, des_holding, mes_referencia, uf, SUM(valor_contabil) vlr_resumo FROM SOLICITACAO_CARGA_PRE_GFX_BRT SOL
      INNER JOIN T_SIGLA_HOLDING_BRT HC ON HC.SIGLA_HOLDING = SOL.COD_HOLDING
      INNER JOIN RESUMO_FISCAL_GFX_BRT DET ON SOL.ID_CARGA = DET.ID_CARGA 
      WHERE 0=0
      AND MES_REFERENCIA='202001' 
      AND SOL.TIPO_DEMONSTRATIVO = 'RESU'
      GROUP BY cod_holding, des_holding, mes_referencia, uf
      ) GFX
      RIGHT JOIN (
                  SELECT sigla_cb, holding_cob AS des_holding, ANO_MES_EMISSAONF, uf_cob, SUM(vlr_total) AS vlr_tcof --'14' AS CSP, HOLDING_COB AS OPERADORA, UF_COB UF, ANO_MES_EMISSAONF MES_REFERENCIA, CICLO_NF, DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT, DSN_ORIGINAL, 0 AS QTD_ACIONAMENTOS, 0 VLR_RESUMO, VLR_TOTAL AS VLR_TCOF
                           FROM SCH_C14DB14.T_VALIDADOR_FISCAL T
                           WHERE ANO_MES_EMISSAONF = '202001' 
                                 AND NOT EXISTS (SELECT 1 
                                                        FROM TMP_DET_DASH TMP
                                                        WHERE TMP.COD_HOLDING=T.SIGLA_CB AND TMP.MES_REFERENCIA=T.ANO_MES_EMISSAONF AND TMP.UF_COB=T.UF_COB AND (TMP.CICLO_NF=T.CICLO_NF))
                           GROUP BY sigla_cb, holding_cob, ANO_MES_EMISSAONF, uf_cob 
                 ) validador ON validador.sigla_cb = gfx.cod_holding AND validador.ANO_MES_EMISSAONF=gfx.mes_referencia AND validador.uf_cob=gfx.uf
      ;



--RESUMIDO
--TRUNCATE TABLE TEMP2
--DROP TABLE TEMP2
CREATE GLOBAL TEMPORARY TABLE TEMP2 ON COMMIT PRESERVE ROWS AS
SELECT * FROM (
  SELECT '14' AS CSP, DES_HOLDING AS OPERADORA, UF, VLR_RESUMO, VLR_TOTAL AS VLR_TCOF, DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT
  FROM TMP_DET_DASH  T
) pivtab
PIVOT
       (  SUM(NVL(VLR_TCOF,0))
          FOR (des_sit) IN ( 'ACEITO C/ PROT' AS "ACEITO_C_PROT", 'ACEITO S/ PROT' AS "ACEITO_S_PROT", 'REJEITADO' AS "REJEITADO", 'RECEBIDO' AS "RECEBIDO", 'PENDENTE' AS "PENDENTE", 'PCT_RECEBIDO' AS "PCT_RECEBIDO", 'PCT_ACEITO_C_PROT' AS "PCT_ACEITO_C_PROT", 'PCT_ACEITO_S_PROT' AS "PCT_ACEITO_S_PROT", 'PCT_REJEITADO' AS PCT_REJEITADO, 'PCT_PENDENTE' AS "PCT_PENDENTE" )
       )
--ORDER BY 1,2,3,4
UNION 
SELECT * FROM (
  SELECT '14' AS CSP, DES_HOLDING AS OPERADORA, ' ' AS UF, 0 VLR_RESUMO, SUM(VLR_TOTAL) AS VLR_TCOF, DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT
  FROM TMP_DET_DASH  T
  GROUP BY DES_HOLDING, COD_SIT
) pivtab
PIVOT
       (  SUM(NVL(VLR_TCOF,0))
          FOR (des_sit) IN ( 'ACEITO C/ PROT' AS "ACEITO_C_PROT", 'ACEITO S/ PROT' AS "ACEITO_S_PROT", 'REJEITADO' AS "REJEITADO", 'RECEBIDO' AS "RECEBIDO", 'PENDENTE' AS "PENDENTE", 'PCT_RECEBIDO' AS "PCT_RECEBIDO", 'PCT_ACEITO_C_PROT' AS "PCT_ACEITO_C_PROT", 'PCT_ACEITO_S_PROT' AS "PCT_ACEITO_S_PROT", 'PCT_REJEITADO' AS PCT_REJEITADO, 'PCT_PENDENTE' AS "PCT_PENDENTE" )
       )
UNION 
SELECT * FROM (
  SELECT '14' AS CSP, ' ' AS OPERADORA, ' ' AS UF, 0 VLR_RESUMO, SUM(VLR_TOTAL) AS VLR_TCOF, DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT
  FROM TMP_DET_DASH  T
  GROUP BY COD_SIT
) pivtab
PIVOT
       (  SUM(NVL(VLR_TCOF,0))
          FOR (des_sit) IN ( 'ACEITO C/ PROT' AS "ACEITO_C_PROT", 'ACEITO S/ PROT' AS "ACEITO_S_PROT", 'REJEITADO' AS "REJEITADO", 'RECEBIDO' AS "RECEBIDO", 'PENDENTE' AS "PENDENTE", 'PCT_RECEBIDO' AS "PCT_RECEBIDO", 'PCT_ACEITO_C_PROT' AS "PCT_ACEITO_C_PROT", 'PCT_ACEITO_S_PROT' AS "PCT_ACEITO_S_PROT", 'PCT_REJEITADO' AS PCT_REJEITADO, 'PCT_PENDENTE' AS "PCT_PENDENTE" )
       )
ORDER BY 1,2,3,4
;
UPDATE TEMP2 SET VLR_RESUMO = (SELECT SUM(VLR_RESUMO) FROM TEMP2 TMP WHERE TMP.CSP=TEMP2.CSP AND TMP.OPERADORA=TEMP2.OPERADORA GROUP BY CSP, OPERADORA) WHERE VLR_RESUMO=0 AND UF=' ';
UPDATE TEMP2 SET VLR_RESUMO = (SELECT SUM(VLR_RESUMO) FROM TEMP2 TMP WHERE UF=' ' AND OPERADORA <> ' ') WHERE UF=' ' AND OPERADORA=' ';
SELECT * FROM TEMP2 WHERE UF=' ' AND OPERADORA <> ' ';


--RESUMIDO POR OPERADORA
SELECT NVL(CSP,' ') CSP, NVL(OPERADORA,' ') OPERADORA, NVL(UF, ' ') UF, SUM(VLR_RESUMO) VLR_RESUMO, SUM(ACEITO_C_PROT), SUM(ACEITO_S_PROT), SUM(REJEITADO), SUM(RECEBIDO), SUM(PENDENTE) FROM (
SELECT * FROM (
  SELECT '14' AS CSP, DES_HOLDING AS OPERADORA, UF, SUM(VLR_RESUMO) AS VLR_RESUMO, SUM(VLR_TOTAL) AS VLR_TCOF, DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT
  FROM TMP_DET_DASH  T
  GROUP BY CUBE(DES_HOLDING, UF, COD_SIT)
) pivtab
PIVOT
       (  SUM(NVL(VLR_TCOF,0))
          FOR (des_sit) IN ( 'ACEITO C/ PROT' AS "ACEITO_C_PROT", 'ACEITO S/ PROT' AS "ACEITO_S_PROT", 'REJEITADO' AS "REJEITADO", 'RECEBIDO' AS "RECEBIDO", 'PENDENTE' AS "PENDENTE" )
       )
)TAB2 
WHERE (OPERADORA IS NULL AND UF IS NULL) OR (OPERADORA IS NOT NULL AND UF IS NOT NULL) OR (OPERADORA IS NOT NULL AND UF IS NULL)
GROUP BY CSP, OPERADORA, UF
ORDER BY 1,2,3 ASC
;

--RESUMIDO E/OU GRID GRAFICO
SELECT * FROM (  
SELECT 
  '14' AS CSP,
  MES_REFERENCIA
  -- , UF, CICLO
  , COD_SIT
  , DECODE(COD_SIT, 0,'RESUMO',1,'ACEITO C/ PROT',2,'ACEITO S/ PROT',3,'REJEITADO',4,'RECEBIDO',5,'PENDENTE',9,'ACIONAMENTOS') DES_SIT
  , ROUND((VLR/CASE WHEN COD_SIT <> 9 THEN 1000 ELSE 1 END),2) VLR
FROM
(
  --PEGANDO VALORES DOS RESUMOS
  SELECT 
  --COD_HOLDING, DES_HOLDING,
  MES_REFERENCIA
  --, UF, CICLO
  , 0 COD_SIT
  , SUM(VLR_RESUMO) VLR
  FROM 
  (
    --PEGA VALORES DO GEF (RESUMO)
    SELECT DISTINCT 
    T.LINHA_GFX,
    --COD_HOLDING, DES_HOLDING, 
    MES_REFERENCIA,
    -- UF, CICLO, 
    VLR_RESUMO
    FROM TMP_DET_DASH  T
  )
  GROUP BY --COD_HOLDING, DES_HOLDING, 
  MES_REFERENCIA
  --,UF, CICLO

  UNION ALL

  --PEGANDO VALORES DOS FISCAIS COM STATUS 
  SELECT 
  MES_REFERENCIA
  -- , UF, CICLO
  , COD_SIT
  , SUM(T.VLR_TOTAL) VLR
  FROM TMP_DET_DASH  T
  WHERE COD_SIT IS NOT NULL
  GROUP BY 
  --COD_HOLDING, DES_HOLDING
  MES_REFERENCIA
  --, UF, CICLO 
  , COD_SIT

  UNION ALL

  --SOMANDO VALORES DOS FISCAIS COM STATUS => RECEBIDO
  SELECT 
  MES_REFERENCIA
  -- , UF, CICLO
  , 4 COD_SIT
  , SUM(T.VLR_TOTAL) VLR
  FROM TMP_DET_DASH  T
  WHERE COD_SIT IS NOT NULL
  GROUP BY 
  --COD_HOLDING, DES_HOLDING
  MES_REFERENCIA
  --, UF, CICLO 

UNION ALL
  SELECT '202001' AS MES_REFERENCIA
  --,RES.UF
  --,CICLO
  , 9 AS COD_SIT
  ,1 VLR
  FROM DUAL
UNION ALL
  SELECT '202002' AS MES_REFERENCIA
  --,RES.UF
  --,CICLO
  , 9 AS COD_SIT
  ,1 VLR
  FROM DUAL
UNION ALL
  SELECT '202003' AS MES_REFERENCIA
  --,RES.UF
  --,CICLO
  , 9 AS COD_SIT
  ,1 VLR
  FROM DUAL

  UNION ALL
  --SOMANDO VALORES DOS FISCAIS COM STATUS => RESUMO - RECEBIDO = PENDENTE
SELECT 
  --RES.COD_HOLDING
  --,RES.DES_HOLDING,
  RES.MES_REFERENCIA
  --,RES.UF
  --,CICLO
  , 5 COD_SIT
  ,NVL(RES.VLR,0) - NVL(REC.VLR,0) VLR
FROM 

(  
  SELECT 
  --COD_HOLDING, DES_HOLDING,
  MES_REFERENCIA
  --, UF, CICLO
  , 0 COD_SIT
  , SUM(VLR_RESUMO) VLR
  FROM 
  (
    SELECT DISTINCT 
    T.LINHA_GFX,
    --COD_HOLDING, DES_HOLDING, 
    MES_REFERENCIA,
    -- UF, CICLO, 
    VLR_RESUMO
    FROM TMP_DET_DASH  T
  )
  GROUP BY --COD_HOLDING, DES_HOLDING, 
  MES_REFERENCIA
  --,UF, CICLO
) RES
JOIN 
(
  SELECT 
  MES_REFERENCIA
  -- , UF, CICLO
  , 4 COD_SIT
  , SUM(T.VLR_TOTAL) VLR
  FROM TMP_DET_DASH  T
  WHERE COD_SIT IS NOT NULL
  GROUP BY 
  --COD_HOLDING, DES_HOLDING
  MES_REFERENCIA
  --, UF, CICLO 
) REC ON 
  --RES.COD_HOLDING = REC.COD_HOLDING
  --AND RES.DES_HOLDING = REC.DES_HOLDING AND
  RES.MES_REFERENCIA = REC.MES_REFERENCIA
  --AND RES.UF = REC.UF
  --RES.CICLO  = REc.CICLO
)

) TABPIV
PIVOT
       (  SUM(NVL(VLR,0))
          FOR (MES_REFERENCIA) IN ( '202001' AS "202001", '202002' AS "202002", '202003' AS "202003" )
       )

ORDER BY 1,2
;

      SELECT DISTINCT 
      SOL.MES_REFERENCIA,
      SUM(VALOR_CONTABIL) OVER(PARTITION BY SOL.MES_REFERENCIA) VLR_RESUMO,
      SUM(VALOR_CONTABIL) over() VLR_RESUMO_TOTAL
      FROM SOLICITACAO_CARGA_PRE_GFX_BRT SOL
      INNER JOIN T_SIGLA_HOLDING_BRT HC ON HC.SIGLA_HOLDING = SOL.COD_HOLDING
      INNER JOIN RESUMO_FISCAL_GFX_BRT DET ON SOL.ID_CARGA = DET.ID_CARGA 
      AND SOL.TIPO_DEMONSTRATIVO = 'RESU'
      WHERE 0=0
      AND SOL.MES_REFERENCIA BETWEEN '202001' AND '202003'
--      GROUP BY SOL.MES_REFERENCIA
/*
MES_REFERENCIA  VLR_RESUMO    VLR_RESUMO_TOTAL
202001          53.529.751,83  158.779.517,16
202002          52.794.587,29  
202003          52.455.178,04  
*/
;
    GROUP BY
       GFX.MES_REFERENCIA,
       NVL( AF.DES_SIT, 'Pendente') --DES_SIT
    


;
      SELECT 
      ROW_NUMBER() OVER ( ORDER BY SOL.COD_HOLDING  ) LINHA_GFX,
      SOL.COD_HOLDING, 
      HC.DES_HOLDING, 
      SOL.MES_REFERENCIA, 
      DET.UF, 
      DET.CICLO, 
      SUM(VALOR_CONTABIL) VLR_RESUMO
      FROM SOLICITACAO_CARGA_PRE_GFX_BRT SOL
      INNER JOIN T_SIGLA_HOLDING_BRT HC ON HC.SIGLA_HOLDING = SOL.COD_HOLDING
      INNER JOIN RESUMO_FISCAL_GFX_BRT DET ON SOL.ID_CARGA = DET.ID_CARGA 
      AND SOL.TIPO_DEMONSTRATIVO = 'RESU'
      WHERE 0=0
      AND SOL.MES_REFERENCIA BETWEEN '201706' AND '201706'  
      AND SIGLA_HOLDING in ('', 'VIV')
      AND UF = 'MA'
--      AND NVL(CICLO,0) != 0 --IN( 1,5 )
      GROUP BY SOL.COD_HOLDING, HC.DES_HOLDING, SOL.MES_REFERENCIA
      , DET.UF
      , DET.CICLO
;

      SELECT 
      ROW_NUMBER() OVER ( ORDER BY SOL.COD_HOLDING  ) LINHA_GFX,
      SOL.COD_HOLDING, 
      HC.DES_HOLDING, 
      SOL.MES_REFERENCIA, 
      DET.UF, 
      DET.CICLO, 
      SUM(VALOR_CONTABIL) VLR_RESUMO
      FROM SOLICITACAO_CARGA_PRE_GFX_BRT SOL
      INNER JOIN T_SIGLA_HOLDING_BRT HC ON HC.SIGLA_HOLDING = SOL.COD_HOLDING
      INNER JOIN RESUMO_FISCAL_GFX_BRT DET ON SOL.ID_CARGA = DET.ID_CARGA 
      AND SOL.TIPO_DEMONSTRATIVO = 'RESU'
      WHERE 0=0
      AND VALOR_CONTABIL != 0
--      AND SOL.MES_REFERENCIA BETWEEN '202001' AND '202001'  
--      AND SIGLA_HOLDING in ('', 'VIV')
--      AND UF = 'DF'
      AND NVL(CICLO,0) != 0 --IN( 1,5 )
      AND (SOL.COD_HOLDING, 
      HC.DES_HOLDING, 
      SOL.MES_REFERENCIA, 
      DET.UF) IN (
      SELECT 
      SOL.COD_HOLDING, 
      HC.DES_HOLDING, 
      SOL.MES_REFERENCIA, 
      DET.UF
      FROM SOLICITACAO_CARGA_PRE_GFX_BRT SOL
      INNER JOIN T_SIGLA_HOLDING_BRT HC ON HC.SIGLA_HOLDING = SOL.COD_HOLDING
      INNER JOIN RESUMO_FISCAL_GFX_BRT DET ON SOL.ID_CARGA = DET.ID_CARGA 
      AND SOL.TIPO_DEMONSTRATIVO = 'RESU'
      WHERE 0=0
      AND VALOR_CONTABIL != 0
--      AND SOL.MES_REFERENCIA BETWEEN '202001' AND '202001'  
--      AND SIGLA_HOLDING in ('', 'VIV')
--      AND UF = 'DF'
      AND NVL(CICLO,0) = 0 --IN( 1,5 )
      GROUP BY SOL.COD_HOLDING, HC.DES_HOLDING, SOL.MES_REFERENCIA
      , DET.UF

      )
      GROUP BY SOL.COD_HOLDING, HC.DES_HOLDING, SOL.MES_REFERENCIA
      , DET.UF
      , DET.CICLO
ORDER BY MES_REFERENCIA DESC
